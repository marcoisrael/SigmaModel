#!/bin/python3
import os, argparse, time
parser = argparse.ArgumentParser(prog="SigmaModel")
parser.add_argument('-cool','--cooling',
                    help="SigmaModel --cooling=startTemp,endTemp,steps \
                        It perfomed a cooling fom start_temp to end_temp in n steps")
parser.add_argument('-alg','--algorithm', default='lexic,metropolis',
                    help='--algorithm={random, lexic, single|metropolis, cluster, glauber}')
parser.add_argument('-s','--steps', type=float, default=1e4,
                    help='--steps={N}')
parser.add_argument('-n','--name',default="data0")
parser.add_argument('-t','--temp')
parser.add_argument('--test', action='store_true')
parser.add_argument('--compile', action='store_true')
args = parser.parse_args()

def showTime(start_time, end_time):
    elapsed_time = end_time-start_time
    hours, rem = divmod(elapsed_time, 3600)
    minutes, seconds = divmod(rem, 60)
    stringTime = f"{int(hours):0>2}:{int(minutes):0>2}:{seconds:0>2.2f}"
    print(f"{'Elapsed time':>25}{stringTime:>25}")

binary = f"bin/main"
cmd_compile = ["gfortran","-o",binary,
                   "functions.f90","algorithm.f90","cooling.f90"]
if args.compile:
    os.system(" ".join(cmd_compile))
    
if args.cooling is not None:
    start_time =  time.perf_counter()
    key, alg = args.algorithm.split(',')
    folder = f'output/cooling/{args.name}/'
    if not os.path.isdir(folder):
        os.makedirs(folder)
    start_temp, end_temp, tq = args.cooling.split(',')
    
    cmd_run = ["./bin/main",f"{start_temp}", f"{end_temp}",f"{tq}",
               f"{int(args.steps)}",folder,key,alg]
    stringTemp = f"{start_temp}-{end_temp}"
    print(" ".join(cmd_run))
    print(75*"-")
    print(f'{"Temp":>25}{stringTemp:>25}')
    print(f'{"TQ":>25}{tq:>25}')
    print(f'{"algorithm":>25}{args.algorithm:>25}')
    print(f'{"steps":>25}{int(args.steps):>25}')
    #print(75*"-")

    os.system(" ".join(cmd_run))
    end_time =  time.perf_counter() 
    # print(75*"-")
    showTime(start_time, end_time)


if args.temp is not None:
    start_time =  time.perf_counter()
    key, alg = args.algorithm.split(',')
    cmd_compile = ["gfortran","-o","bin/main0","functions.f90","algorithm.f90","temp.f90"]
    cmd_run = ["./bin/main0",f"{args.temp}",f"{int(args.steps)}",key,alg]
    print(75*"-")
    print(f'{"Temp":>25}{args.temp:>25}')
    print(f'{"algorithm":>25}{args.algorithm:>25}')
    print(f'{"steps":>25}{int(args.steps):>25}')
    # ~ print(f'{"spacing":>25}{"1000":>25}')
    #print(75*"-")
    # ~ os.system(" ".join(cmd_compile))
    os.system(" ".join(cmd_run))
    end_time =  time.perf_counter() 
    # print(75*"-")
    showTime(start_time, end_time)


if args.test:
    cmd_compile = ["gfortran","-o","output/main",
                   "functions.f90","test.f90"]
    if os.path.isfile('test.f90'):    
        os.system(" ".join(cmd_compile))
        os.system("./output/main")


