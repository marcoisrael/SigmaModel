#!/bin/python3
import os, argparse, time
parser = argparse.ArgumentParser(prog="SigmaModel")
parser.add_argument('-cool','--cooling',
					help="SigmaModel --cooling=startTemp,endTemp,steps \
						It perfomed a cooling fom start_temp to end_temp in n steps")
parser.add_argument('-alg','--algorithm', default='lexic,metropolis',
					help='--algorithm={random, lexic, single|metropolis, cluster, glauber}')
parser.add_argument('-s','--steps', type=float, default=1e4,
					help='--steps={N}')
parser.add_argument('-n','--name',default="data0")
parser.add_argument('-t','--temp')
parser.add_argument('-r','--record', action='store_true')
parser.add_argument('-m','--measure', action='store_true')
parser.add_argument('-c','--compile', action='store_true')
args = parser.parse_args()

def showTime(start_time, end_time):
	elapsed_time = end_time-start_time
	hours, rem = divmod(elapsed_time, 3600)
	minutes, seconds = divmod(rem, 60)
	stringTime = f"{int(hours):0>2}:{int(minutes):0>2}:{seconds:0>2.2f}"
	print(f"{'Elapsed time':>25}{stringTime:>25}")


if not os.path.isdir("bin"):
	os.makedirs("bin")

if args.compile:
	os.system(" ".join(["gfortran","-o","bin/main","functions.f90","algorithm.f90","cooling.f90"]))
	os.system(" ".join(["gfortran","-o","bin/main0","functions.f90","algorithm.f90","therm.f90"]))
	os.system(" ".join(["gfortran","-o","bin/main1","functions.f90","algorithm.f90","measure.f90"]))


if args.cooling is not None:
	start_time =  time.perf_counter()
	key, alg = args.algorithm.split(',')

	start_temp, end_temp, tq = args.cooling.split(',')
	folder = f'output/cooling/{args.name}/{start_temp}-{end_temp}'
	if not os.path.isdir(folder):
		os.makedirs(folder)

	cmd_run = ["./bin/main",f"{start_temp}", f"{end_temp}",f"{tq}",f"{int(args.steps)}",folder,key,alg]

	stringTemp = f"{start_temp}-{end_temp}"
	print(" ".join(cmd_run))
	print(75*"-")
	print(f'{"Temp":>25}{stringTemp:>25}')
	print(f'{"TQ":>25}{tq:>25}')
	print(f'{"algorithm":>25}{args.algorithm:>25}')
	print(f'{"steps":>25}{int(args.steps):>25}')
	os.system(" ".join(cmd_run))
	end_time =	time.perf_counter() 
	showTime(start_time, end_time)


if args.record:
	start_time =  time.perf_counter()
	key, alg = args.algorithm.split(',')
	folder = f'output/thermalized/{args.temp}'
	if not os.path.isdir(folder):
		os.makedirs(folder) 

	cmd_run = ["./bin/main0",f"{args.temp}",f"{int(args.steps)}",key,alg]

	print(" ".join(cmd_run))
	print(75*"-")
	print(f'{"Temp":>25}{args.temp:>25}')
	print(f'{"algorithm":>25}{args.algorithm:>25}')
	print(f'{"steps":>25}{int(args.steps):>25}')
	os.system(" ".join(cmd_run))
	end_time =	time.perf_counter() 
	showTime(start_time, end_time)


if args.measure:
	start_time =  time.perf_counter()
	key, alg = args.algorithm.split(',')
	folder = f'output/thermalized/{args.temp}'
	if not os.path.isdir(folder):
		os.makedirs(folder) 

	cmd_run = ["./bin/main1",f"{args.temp}",f"{int(args.steps)}",key,alg]

	print(" ".join(cmd_run))
	print(75*"-")
	print(f'{"Temp":>25}{args.temp:>25}')
	print(f'{"algorithm":>25}{args.algorithm:>25}')
	print(f'{"steps":>25}{int(args.steps):>25}')
	os.system(" ".join(cmd_run))
	end_time =	time.perf_counter() 
	showTime(start_time, end_time)